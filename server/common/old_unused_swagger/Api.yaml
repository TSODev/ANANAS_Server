swagger: "2.0"
info:
  version: 1.0.1
  title: MANDARINE
  description: Express Mandarine RestAPI server
basePath: /api/v1

tags:
  - name: Users
    description: Everithing about Users
  - name: Content
    description: What the API is made for

consumes:
  - application/json
produces:
  - application/json


definitions:
  UserCredentials:
    type: object
    title: User Login information  
    required:
      - "email"
      - "password"
    properties:
      email:
        type: string
        example: "first.last@domain.com"
      password:
        type: string
        example: "123456789"
  LogoutCredentials:
    type: object
    title: User Logout information  
    required:
      - "data"
    properties:
      data:
        type: string
        example: "nothing"
  UserInfos:
    type: object
    title: User Information  
    required:
      - "id"
      - "email"
    properties:
      id:
        type: string
        example: "1"
      email:
        type: string
        example: "first.last@domain.com"

paths:
  /signup:
    post:
      tags: 
        - "Users"
      summary:
        "Register a new user"
      parameters:
      - in: "body"
        name: "body"
        description: user credentials 
        required: true
        schema:
          $ref: "#/definitions/UserCredentials"    
      responses:  
        200:
          description: "Successful operation"
        400:
          description: Return errors
  /login:
    post:
      tags:
        - "Users"
      summary:
        "Login with a existing user"
      parameters:
        - in: "body"
          name: "body"
          description: "user credentials"
          required: true
          schema:
            $ref: "#/definitions/UserCredentials"
      responses:
        201:
          description: "User logged In"
        403:
          description: "Authentication error"
  /logout:
    post:
      tags:
        - "Users"
      summary:
        "Logout the current user"
      description:
        "Cross Site Request Forgery \n You must send back the XSRF-TOKEN cookie in the x-xsrf-token header !\n without the x-xsrf-token header, it will send back 403 - Forbidden"
      parameters:
        - in: "header"
          type: string
          name: "x-xsrf-token"
          description: "Cross Site Token"
          required: true  
        - in: "body"
          name: data
          description: anything you want, this is not used !
          schema:
            $ref: "#/definitions/LogoutCredentials"
          required: false
      responses:
        200:
          description: "User logged out"
        403:
          description: "Authentication Error"
  /user:
    get:
      tags:
        - "Users"
      summary:
        "Get the current user"
      responses:
        403:
          description: Authentication error
  /user/{userId}:
    get:
      tags:
        - "Users"
      summary:
        "Get User by Id"
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          type: string
      responses:
        200:
          description: user info
        403:
          description: Authentication error
    delete:
      tags:
        - "Users"
      parameters:
        - name: "userId"
          in: path
          description: ID of user to delete
          required: true
          type: string
      responses:
        201:
          description: User Deleted.
        403:
          description: Authentication error
  /users:
    get:
      tags:
        - "Users"
      summary:
        "Get All Users"
      responses:
        403:
          description: Authentication error
  
  /content:
    get:
      tags:
        - "Content"
      responses:
        403 : 
          description: Authentication error

  /socketTest:
    get:
      tags:
        - "Content"
      responses:
        403 : 
          description: Authentication error
